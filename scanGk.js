//WARNING:
//This script is adapted minimally from my latin scansion script.
//much of it is otiose.
//some of it has yet to be fully implemented
//it is a bit of a mess...

/*
These js functions are intended to be called from an html file generated by tragedy2html.py:
python3 tragedy2html.py myxmlfile.xml > myhtmlfile.html

You can then open that html file in a browser, where the syllables will be tagged with lengths
by this script, and you can use some simple editing functions (in the browser) to make corrections.

Note that you'll need to use a web server of some kind to access the page, otherwise edits
won't be saved. A simple way to do that is to run the python server in this directory:
	python -m SimpleHTTPServer 8080
Then find your file at the address http://localhost:8080/myhtmlfile.html
A more reliable solution is to use something like MAMP/LAMP (www.ampps.com)

If the file is served properly, the browser will save your work to something like myhtmlfile_save.html.
If you don't load the save file when the page asks you to, you will overwrite previous work.
By all means make copies of the save file between work sessions!

If you choose to load the editing page from a public web server, please be sure you know what
you're doing: I make no guarantees as to the security of the js functions.
*/

var defshort = [3,7,11]
var lengthenme=["ἀθανάτ","χρυσαόρ","ἀγλαο","επεφύκ","καλὸ","ὀλοφυρο","Ὑπερίον","ἱερ","θεὰ"]
var correptme2=["ὲυ","αἱ","οὗ","εῦ","εῖ","αῖ","αὶ","αί","αἳ","ου","οι","οί","οὶ","οῦ","αι","οἱ","ει","εὶ","ῳ","οῖ","ευ","οἳ"]
var correptme1 = ["ὢ","ὧ","ᾷ","ῶ","ῃ","ή","ῇ","ῳ","ὼ","ω","η","ὴ","ῇ","ῷ","ῃ","ώ","ἢ"]
var long_vowels = ["ώ","ή","Ω", "ω", "Η", "η","Ἶ","ῖ","ῗ","Ῑ","Ἷ","ῑ","ῡ","ῦ","ῧ","Ῡ","ῲ","ῳ","ῴ","ῶ","ῷ","Ὼ","Ώ","ῼ","Ὴ","Ή","ῌ","ῂ","ῃ","ῄ","ῆ","ῇ","ᾄ","ᾌ","ᾂ","ᾊ","ἆ","Ἆ","ᾆ","ᾎ","ᾀ","ᾈ","ᾅ","ᾍ","ᾃ","ᾋ","ἇ","Ἇ","ᾇ","ᾏ","ᾁ","ᾉ","ᾴ","ᾲ","ᾶ","ᾷ","ᾱ","Ᾱ","ᾳ","ᾼ","ἠ","Ἠ","ἤ","Ἤ","ᾔ","ᾜ","ἢ","Ἢ","ᾒ","ᾚ","ἦ","Ἦ","ᾖ","ᾞ","ᾐ","ᾘ","ἡ","Ἡ","ἥ","Ἥ","ᾕ","ᾝ","ἣ","Ἣ","ᾓ","ᾛ","ἧ","Ἧ","ᾗ","ᾟ","ᾑ","ᾙ","ή","ὴ","ἶ","ἷ","ὖ","ὗ","Ὗ","ὠ","Ὠ","ὤ","Ὤ","ᾤ","ᾬ","ὢ","Ὢ","ᾢ","ᾪ","ὦ","Ὦ","ᾦ","ᾮ","ᾠ","ᾨ","ὡ","Ὡ","ὥ","Ὥ","ᾥ","ᾭ","ὣ","Ὣ","ᾣ","ᾫ","ὧ","Ὧ","ᾧ","ᾯ","ᾡ","ᾩ","ώ","ὼ"]
//var longshort = ["Ἶ","ῖ","ῗ","Ῑ","Ἷ","ῑ","ῡ","ῦ","ῧ","Ῡ","ᾄ","ᾌ","ᾂ","ᾊ","ἆ","Ἆ","ᾆ","ᾎ","ᾀ","ᾈ","ᾅ","ᾍ","ᾃ","ᾋ","ἇ","Ἇ","ᾇ","ᾏ","ᾁ","ᾉ","ᾴ","ᾲ","ᾶ","ᾷ","ᾱ","Ᾱ","ᾳ","ᾼ","ἠ","Ἠ","ἤ","Ἤ","ᾔ","ᾜ","ἢ","Ἢ","ᾒ","ᾚ","ἦ","Ἦ","ᾖ","ᾞ","ᾐ","ᾘ","ἡ","Ἡ","ἥ","Ἥ","ᾕ","ᾝ","ἣ","Ἣ","ᾓ","ᾛ","ἧ","Ἧ","ᾗ","ᾟ","ᾑ","ᾙ","ή","ὴ","ἶ","ἷ","ὖ","ὗ","Ὗ","ὠ","Ὠ","ὤ","Ὤ","ᾤ","ᾬ","ὢ","Ὢ","ᾢ","ᾪ","ὦ","Ὦ","ᾦ","ᾮ","ᾠ","ᾨ","ὡ","Ὡ","ὥ","Ὥ","ᾥ","ᾭ","ὣ","Ὣ","ᾣ","ᾫ","ὧ","Ὧ","ᾧ","ᾯ","ᾡ","ᾩ","ώ","ὼ"]
var shortlong=["Ἄ","Ἴ", "῎Υ", "Ἅ", "Ἵ", "Ὕ", "Ἂ", "῍Υ", "Ἲ", "Ἃ", "Ἳ", "Ὓ", "α","ι", "υ", "Ἀ", "Ἰ", "᾽Υ", "ά", "ί", "ύ", "ὰ", "ὶ", "ὺ", "ἀ", "ἰ", "ὐ", "ἁ", "ἱ", "ὑ", "ἄ", "ἴ", "ὔ", "ἅ", "ἵ", "ὕ", "ἃ", "ἳ", "ὓ"]
var short_vowels = ["ὲ","έ","ί","ά","ό","Α","Ε","Υ","Ο","Ι","ι", "υ","α", "ε","ύ", "ο", "ἀ","Ἀ","ἄ","Ἄ","ἂ","Ἂ","ἁ","Ἁ","ἅ","Ἅ","ἃ","Ἃ","ά","Ά","ὰ","Ὰ","ᾰ","Ᾰ","ἐ","Ἐ","ἔ","Ἔ","ἒ","Ἒ","ἑ","Ἑ","ἕ","Ἕ","ἓ","Ἓ","έ","ὲ","ἰ","Ἰ","ἴ","Ἴ","ἲ","Ἲ","ἱ","Ἱ","ἵ","Ἵ","ἳ","Ἳ","ί","ὶ","ὀ","Ὀ","ὄ","Ὄ","ὂ","Ὂ","ὁ","Ὁ","ὅ","Ὅ","ὃ","Ὃ","ό","ὸ","ὐ","ὔ","ὒ","ὑ","Ὑ","ὕ","Ὕ","ὓ","Ὓ","ύ","ὺ","Ὲ","Έ","ῐ","ῒ","ΐ","Ῐ","Ὶ","Ί","ῠ","ῢ","ΰ","Ῠ","Ὺ","Ύ","Ὸ","Ό"]
var vowels = ["ὲ","ώ","ή","ά","έ","ί","ό","Α","Ε","Υ","Ο","Ι","Ω","ω","Η","ι", "α", "ε","υ","ύ", "ο", "η","Ἶ","ῖ","ῗ","Ῑ","Ἷ","ῑ","ῡ","ῦ","ῧ","Ῡ","ῲ","ῳ","ῴ","ῶ","ῷ","Ὼ","Ώ","ῼ","Ὴ","Ή","ῌ","ῂ","ῃ","ῄ","ῆ","ῇ","ᾄ","ᾌ","ᾂ","ᾊ","ἆ","Ἆ","ᾆ","ᾎ","ᾀ","ᾈ","ᾅ","ᾍ","ᾃ","ᾋ","ἇ","Ἇ","ᾇ","ᾏ","ᾁ","ᾉ","ᾴ","ᾲ","ᾶ","ᾷ","ᾱ","Ᾱ","ᾳ","ᾼ","ἠ","Ἠ","ἤ","Ἤ","ᾔ","ᾜ","ἢ","Ἢ","ᾒ","ᾚ","ἦ","Ἦ","ᾖ","ᾞ","ᾐ","ᾘ","ἡ","Ἡ","ἥ","Ἥ","ᾕ","ᾝ","ἣ","Ἣ","ᾓ","ᾛ","ἧ","Ἧ","ᾗ","ᾟ","ᾑ","ᾙ","ή","ὴ","ἶ","ἷ","ὖ","ὗ","Ὗ","ὠ","Ὠ","ὤ","Ὤ","ᾤ","ᾬ","ὢ","Ὢ","ᾢ","ᾪ","ὦ","Ὦ","ᾦ","ᾮ","ᾠ","ᾨ","ὡ","Ὡ","ὥ","Ὥ","ᾥ","ᾭ","ὣ","Ὣ","ᾣ","ᾫ","ὧ","Ὧ","ᾧ","ᾯ","ᾡ","ᾩ","ώ","ὼ","ἀ","Ἀ","ἄ","Ἄ","ἂ","Ἂ","ἁ","Ἁ","ἅ","Ἅ","ἃ","Ἃ","ά","Ά","ὰ","Ὰ","ᾰ","Ᾰ","ἐ","Ἐ","ἔ","Ἔ","ἒ","Ἒ","ἑ","Ἑ","ἕ","Ἕ","ἓ","Ἓ","έ","ὲ","ἰ","Ἰ","ἴ","Ἴ","ἲ","Ἲ","ἱ","Ἱ","ἵ","Ἵ","ἳ","Ἳ","ί","ὶ","ὀ","Ὀ","ὄ","Ὄ","ὂ","Ὂ","ὁ","Ὁ","ὅ","Ὅ","ὃ","Ὃ","ό","ὸ","ὐ","ὔ","ὒ","ὑ","Ὑ","ὕ","Ὕ","ὓ","Ὓ","ύ","ὺ","Ὲ","Έ","ῐ","ῒ","ΐ","Ῐ","Ὶ","Ί","ῠ","ῢ","ΰ","Ῠ","Ὺ","Ύ","Ὸ","Ό"]
var sing_cons = ['Β','Γ','Δ','Θ','Κ','Λ','Μ','Ν','Π','Ρ','Σ','Τ','Φ','Χ','ς', 'ρ', 'τ', 'θ', 'π', 'σ', 'δ', 'φ', 'γ', 'ξ', 'κ', 'λ', 'χ', 'β', 'ν', 'μ']
var doub_cons = ['ξ', 'ζ', 'ψ','Ζ','Ψ','Ξ']
var consonants = ['Ζ','Ψ','Ξ','Β','Γ','Δ','Θ','Κ','Λ','Μ','Ν','Π','Ρ','Σ','Τ','Φ','Χ','ς', 'ρ', 'τ', 'θ', 'π', 'σ', 'δ', 'φ', 'γ', 'ξ', 'κ', 'λ', 'χ', 'β', 'ν', 'μ', 'ξ', 'ζ', 'ψ']
var diphthongs = ['οἱ', 'αι', 'αῖ', 'ευ', 'εῦ', 'αυ', 'αῦ', 'οι', 'οῖ','ου', 'οῦ', 'ει', 'εῖ', 'υι', 'υῖ', 'ηῦ']
var stops = ['θ','φ','χ','π', 'τ', 'κ', 'β', 'δ', 'γ','Θ','Χ','Φ','Π','Τ','Κ','Β','Δ','Γ']
var liquids = ['ρ', 'λ','Ρ','Λ']
var punc = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')','-', '_', '=', '+', '}', '{', '[', ']', '1', '2','3', '4', '5', '6', '7', '8', '9', '0', ',', '\'','᾽', '（', '）']
var longsylls = ['ρας','ραν']
var nextsyll;
var prevsyll;
var longcount=0;
var shortcount=0;
var gotlong;
var dontcheck=0
var hasDip;
var errors=0;
var errorArr=[];
var sapphic14=['x', 'x', 'l', 's', 's', 'l', 's', 's', 'l', 's', 's', 'l', 's', 'x']
var pent14=["long","short","short","long","short","short","long","long","short","short","long","short","short","long"];
var pent12=["long","long","long","long","long","long","short","short","long","short","short","long"];
var pentEnd=["long","short","short","long","short","short","long","long"];
var iambic_strophe=[['x','l','s','l','x','l','s','l','x','l','s','l'],['x','l','s','l','x','l','s','l']]
var sotadean=[['l','l','s','s','l','l','s','s','l','s','l','s','l','l']]
var galliamb=[['s','s','l','s','l','s','l','l','s','s','l','s','s','s','s','x']];
var glycpher1=[['l','x','l','s','s','l','s','x'],['l','x','l','s','s','l','s','x'],['l','x','l','s','s','l','s','x'],['l','x','l','s','s','l','x']]
var glycpher2=[['l','x','l','s','s','l','s','x'],['l','x','l','s','s','l','s','x'],['l','x','l','s','s','l','s','x'],['l','x','l','s','s','l','s','x'],['l','x','l','s','s','l','x']]
var iamtetcata=[['x','l','s','l','x','l','s','l','x','l','s','l','x','l','l']];
var priapean=[['l','x','l','s','s','l','s','l','l','s','l','s','s','l','x']];
var sapphics=[['l','s','l','x','l','s','s','l','s','l','x'],['l','s','l','x','l','s','s','l','s','l','x'],['l','s','l','x','l','s','s','l','s','l','x'],['l','s','s','l','x']];
var scazon=[['x','l','s','l','x','l','x','l','x','l','l','l']];
var iambic_senarii=[['x','l','s','l','x','l','s','l','x','l','s','l']];
var senarii=['x','l','x','l','x','l','x','l','x','l','s','l'];
var hendecasyllables=[['x','x','l','s','s','l','s','l','s','l','x']];
var sapphic2=[['l','s','s','l','s','l','x'],['l','s','l','l','l','s','s','l','l','s','s','l','s','l','x']];
var trocstrophe = [['l','s','l','s','l','s','l'],['x','l','s','l','x','l','s','l','x','l','x']];
var ionaminore=[['s','s','l','l','s','s','l','l','s','s','l','l','s','s','l','l'],['s','s','l','l','s','s','l','l','s','s','l','l','s','s','l','l'],['s','s','l','l','s','s','l','l']];
var alcaic=[['x','l','s','l','l','l','s','s','l','s','x'],['x','l','s','l','l','l','s','s','l','s','x'],['x','l','s','l','l','l','s','l','x'],['l','s','s','l','s','s','l','s','l','x']];
var sapadon=[['l','s','l','l','l','s','s','l','s','l','x'],['l','s','l','l','l','s','s','l','s','l','x'],['l','s','l','l','l','s','s','l','s','l','x'],['l','s','s','l','x']];
var asc1=[['l','l','l','s','s','l','l','s','s','l','s','x']];
var asc2=[['l','l','l','s','s','l','s','x'],['l','l','l','s','s','l','l','s','s','l','s','x']];
var asc3=[['l','l','l','s','s','l','l','s','s','l','s','x'],['l','l','l','s','s','l','l','s','s','l','s','x'],['l','l','l','s','s','l','l','s','s','l','s','x'],['l','l','l','s','s','l','s','x']];
var asc4=[['l','l','l','s','s','l','l','s','s','l','s','x'],['l','l','l','s','s','l','l','s','s','l','s','x'],['l','l','l','s','s','l','x'],['l','l','l','s','s','l','s','x']];
var asc5=[['l','l','l','s','s','l','l','s','s','l','l','s','s','l','s','x']];

//some of these functions are left over from latin scansion and haven't been updated for Greek
//Helper Functions://=============
function getText(syll){ //remove punctuation; a bit hit or miss...
    var text=$(syll).text().replace(/·[\]\[()\?\.:;,\!\"\'\s*]/g, "");
    text=text.replace(/,/g, "");
    text=text.replace(/·/g, "");
    text=text.replace(".", "");
    text=text.replace(".", "");
    text=text.replace(";", "");
	return text
}
function checkElision(syll){ //lazy dummy to catch leftovers from Latin scansion
	return false
}
function getQty(mysyll){
    var text=getText(mysyll)
    var hasMacron=findLong(text);
    var hasDiphthong=findDiphthong(text);
    lastletter=text[text.length-1];
    syllastletter=text[text.length-1];
    lastbutone=[text.length-2];
    hiatus=false;    
   	if($(mysyll).is(':last-child')){
    var nexttext=$(mysyll).parent().next().children().eq(0).text().replace(/:,.;᾽᾽·;[\]\[()\?.\!:;,\"\'\s*]/g, "");
    var nextsyll=$(mysyll).parent().next().children().eq(0);
    }
    else{
        var nexttext=$(mysyll).next().text().replace(/:,.;᾽᾽·;[\]\[()\?.:\!;,\"\'\s*]/g, "");
        var nextsyll=$(mysyll).next();
    }    
    if($(mysyll).is(':first-child')){
        skipelided=0;
        if($(mysyll).parent().prev().children(':last').hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).parent().prev().children(':last').prev();
           }
        else{ 
        var prevosyll=$(mysyll).parent().prev().children(':last');
    }
    }
    else{
        skipelided=0;
        if($(mysyll).prev().hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).prev().prev();
           }
        else{   
        var prevosyll=$(mysyll).prev();
    }
    }    
    firstletter=nexttext[0];    
    if(hasDip==1 && !checkcorr(mysyll,nextsyll)){
            return 'long';
            }
    else if(gotlong==1 && !checkcorr(mysyll,nextsyll)){
            return 'long';
            }
    else if (makePosition(mysyll)){
            return 'long';
            }
    else {
            return 'short';      
            }
}
function findLong(syllab){
    gotlong=0;
    
    for (var i = 0; i < syllab.length; i++) {
    	//console.log("checking " +syllab.charAt(i))
    	if(long_vowels.indexOf(syllab.charAt(i)) >=0){  //will return an index if it's in the array, -1 if not
		gotlong=1 
		}   	
	}
	
	if(syllab.slice(-1)=="_"){
		gotlong=1
	}
	
    if(gotlong==0){
    	return false
    }
    else{
    	return true;
    }
    
}
function findDiphthong(syllab){
    hasDip=0;
    vcount=0
    for (var i = 0; i < syllab.length; i++) {
    	if(vowels.indexOf(syllab.charAt(i)) >=0){
    	vcount++
    	}
    	//we could do this by checking the next char once we find a vowel
    	//instead of just counting vowels in the syll.
    	//can there be more than one vowel in syll without diphthong?
	}
	//console.log("vowel count: " + vcount)
    if(vcount < 2){
    	return false
    }
    else{
    	hasDip=1
    	return true;
    }
}
function makePosition(syllab){
    var vowelpos;
    var lastpos;
    var cons1;
    var cons2;
    var punc;
    //add greek unicode punc here
    
    text=getText($(syllab))
    //check for punctuation, pause makes a difference with mute/liquid
    lastchar=$(syllab).text().slice(-1)
    //console.log($(syllab).text()+" : "+lastchar)
    if(lastchar == ","){
   // if(lastchar.match(/,/)){
   	//console.log($(syllab).text())
    	punc = 1
    }
    //console.log("after gettext: " + text)

    //Add check for segment end here: if parent word is last child and there's another seg in the div
    //it's done in fix.js
    
    if($(syllab).is(':last-child')){
    var nexttext=getText($(syllab).parent().next().children().eq(0))

    } 
    else{
        var nexttext=getText($(syllab).next())
    }
    //console.log("this syll: "+ text)
    //console.log("next syll: "+ nexttext)

    vowels.forEach(function (substring) {
        if (text.indexOf(substring) >= 0) {
            vowelpos = text.indexOf(substring);
            //console.log("found vowel at "+vowelpos)
            if (lastpos > vowelpos) {
                vowelpos = lastpos;
            }
            lastpos = vowelpos;
        }
    });
    myVowel = text[vowelpos];
    endof = text.slice(vowelpos + 1);
    startof = nexttext.slice(0, 2);
	//console.log("end ofthis syll: "+ endof)
    //console.log("start of next syll: "+ startof)

	
	
    var wordbreak=0;
    var nextword=0;
    var sameword=0;
    if (endof.length > 1) {
        cons1 = endof[0];
        cons2 = endof[1];
        sameword=1;
    } else if (endof.length == 1) {
        cons1 = endof[0];
        cons2 = startof[0];
        wordbreak=1;
    } else {
        cons1 = startof[0];
        cons2 = startof[1];
        nextword=1;
    }
    
    //console.log("checking pos for "+cons1+" and "+cons2)
    if (doub_cons.indexOf(cons1) >=0){
        return true;
        //console.log("found a double cons, "+cons1)            
    }
    else if(consonants.indexOf(cons1) >= 0 && consonants.indexOf(cons2) >= 0){//two consonants
      //console.log("found 2 cons: " +cons1 +", "+cons2)        
        if($(syllab).is(':last-child') && wordbreak==1){//end of word, ignore mute/liquid rule
                //console.log('two consonants at word break; lengthening');
                return true;
        }
        
         //This causes too much trouble
        else if (stops.indexOf(cons1) >= 0 && liquids.indexOf(cons2) >= 0 ){
        	//console.log(text + ": "+nexttext+"not lengthening with m/l at word break and pause")      	
        	return false;
        }
        
        /* //too many probs with m/l - FIXME
        else if (jQuery.inArray(cons1, stops) == -1 || jQuery.inArray(cons2, liquids) == -1){
            //console.log('two consonants, not mute/liquid')
            return true;
        }
        */
        
        else{  // for all cons combinations until we fix it for m/l
        return true
        }
    }
    else {
        //console.log('checked for position, returned false')
        return false;
    }
}
function checkcorr(syllo, nextsyll){   
   	if(!$(syllo).is(':last-child')){
   		return false
   	}
   	else{
   	var text=getText($(syllo))
   	var lastletter=text[text.length-1]
    var lastletters=text[text.length-2]+text[text.length-1];
    var nexttext=getText(nextsyll)
    var firstletter=nexttext[0]; 
    //console.log("in checkcorr, last two are "+ lastletters+"; next letter is "+firstletter)
//    if((jQuery.inArray(lastletter, correptme1) != -1 ||jQuery.inArray(lastletter, long_vowels) != -1 || jQuery.inArray(lastletters, diphthongs) != -1|| jQuery.inArray(lastletters, correptme2) != -1) && jQuery.inArray(firstletter, vowels) != -1 ){
    if((jQuery.inArray(lastletter, correptme1) != -1|| jQuery.inArray(lastletters, correptme2) != -1) && jQuery.inArray(firstletter, vowels) != -1 ){
            //console.log("correpting syll: "+text+" before "+nexttext)
            return true;
        }
    }
}
function findPrev(syll, num){
	myline= $(syll).closest('.line');
	sylls=$(myline).find('.syll');
	index=$( sylls ).index( syll );
	i=1;
	j=0;
	while ( j < num ){
		if(!$(sylls).eq(index-i).hasClass('elided')){
			j++
			}
		i++
		}
	if ($(myline).find('.syll').eq(index-i).hasClass('elided')){
		i++
		}
	return $(myline).find('.syll').eq(index-i)	
}
function findNext(syll, num){
	myline= $(syll).closest('.line');
	sylls=$(myline).find('.syll');
	index=$( sylls ).index( syll );
	i=1;
	j=0;
	while ( j < num ){
		if(!$(sylls).eq(index+i).hasClass('elided')){
			j++
			}
		i++
		}
	if ($(myline).find('.syll').eq(index+i).hasClass('elided')){
		i++
		}
	mysyll=$(sylls).eq(index+i)
	//console.log("text of syllable + " + num + " is "+ mysyll.text())
	return mysyll	
}
function removeMacron(shortsyll){
    newtext=$(shortsyll).text();
    //////////console.log("shortening "+newtext)
    //use this to fix macrons in the second half of the pentameter
    newtext=newtext.replace(/ā/gi,"a");
    newtext=newtext.replace(/ē/gi,"e");
    newtext=newtext.replace(/ī/gi,"i");
    newtext=newtext.replace(/ō/gi,"o");
    newtext=newtext.replace(/ū/gi,"u");
    $(shortsyll).text(newtext);
}
//================================

//Scannning Functions://==============
function checkScan(mysyll, index){
    var lineno=index;
    var text=getText($(mysyll))
    //console.log('checking syllable '+ text)

    var hasMacron=findLong(text);
    //console.log("macron value: "+ gotlong)
    var hasDiphthong=findDiphthong(text);
    //console.log("hasMacron is "+ hasMacron)
    //console.log("syllable text is " + text)
    lastletter=text[text.length-1];
    syllastletter=text[text.length-1];
    lastbutone=[text.length-2];
    hiatus=false;    
   if($(mysyll).is(':last-child')){
    var nexttext=$(mysyll).parent().next().children().eq(0).text().replace(/:,.;᾽᾽·;[\]\[()\?.\!:;,\"\'\s*]/g, "");
    var nextsyll=$(mysyll).parent().next().children().eq(0);
    }
    else{
        var nexttext=$(mysyll).next().text().replace(/:,.;᾽᾽·;[\]\[()\?.:\!;,\"\'\s*]/g, "");
        var nextsyll=$(mysyll).next();
    }
    
    if($(mysyll).is(':first-child')){
        skipelided=0;
        if($(mysyll).parent().prev().children(':last').hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).parent().prev().children(':last').prev();
           }
        else{ 
        var prevosyll=$(mysyll).parent().prev().children(':last');
    }
    }
    else{
        skipelided=0;
        if($(mysyll).prev().hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).prev().prev();
           }
        else{   
        var prevosyll=$(mysyll).prev();
    }
    }    
    firstletter=nexttext[0];    
    if(hasDip==1){
            $(mysyll).addClass('long');
            }
    else if(gotlong==1){
            $(mysyll).addClass('long');
            }
    else if (makePosition(mysyll)){
            $(mysyll).addClass('long');
            }
    else if(index == 0){
		$(mysyll).removeClass('short res1 res2 nores').addClass('syll long');
	}
    else {
            gotlong=0;
            hasDip=0;  
            $(mysyll).addClass('short');      
            }
}
function checkHexPattern(mysyll, index){
	
    var scanThis=getQty(mysyll)
    var lineno=index;
    var text=getText($(mysyll))
    var hasMacron=findLong(text);
    var hasDiphthong=findDiphthong(text);
    lastletter=text[text.length-1];

    //check for following siblings first!    
    if($(mysyll).is(':last-child')){
    var nexttext=getText($(mysyll).parent().next().children().eq(0))
    var nextsyll=$(mysyll).parent().next().children().eq(0);
    }
    else{
        var nexttext=getText($(mysyll).next())
        var nextsyll=$(mysyll).next();
    }
    if($(nextsyll).is(':last-child')){
    var next1text=getText($(nextsyll).parent().next().children().eq(0))
    var next1syll=$(nextsyll).parent().next().children().eq(0);
    }
    else{
        var next1text=getText($(nextsyll).next())
        var next1syll=$(nextsyll).next();
    }
	if($(mysyll).is(':first-child')){
        skipelided=0;
        if($(mysyll).parent().prev().children(':last').hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).parent().prev().children(':last').prev();
           }
        else{ 
        var prevosyll=$(mysyll).parent().prev().children(':last');
    }
    }
    else{
        skipelided=0;
        if($(mysyll).prev().hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).prev().prev();
           }
        else{   
        var prevosyll=$(mysyll).prev();
    }
    }    
	var scanNext=getQty(nextsyll)
	var scanNext1=getQty(next1syll)

//2.  check by pattern

    if (index == 0){//first syll 
		$(mysyll).removeClass('short res1 res2 nores').addClass('syll long syll1 startfoot');
		longcount=1;
		shortcount=0;
		return
	}
	//beginning of a foot: must be long
	else if(longcount==0 && shortcount==0){
	    $(mysyll).removeClass('short').addClass('long long1 startfoot');
	    longcount=1
	    shortcount=0
		return
	}
	
	//decision point at Thesis
	else if(longcount==1){
	
		if (scanThis=="long" && scanNext=="long"){ //end of spondee
			$(mysyll).removeClass('short').addClass('long long2 spondee endfoot');
			longcount=0
			shortcount=0
			return
		}
		else if(scanThis=="short" && scanNext=="short"){
			$(mysyll).removeClass('long').addClass('short short1 dactyl');
			longcount=0
			shortcount=1
			return
		}
		else if (scanThis=="short" && scanNext=="long"){
			//rely on the long that's scanned next; long is usually scanned right
			$(mysyll).removeClass('short').addClass('long long2 spondee endfoot');
			longcount=0
			return
			}
		else if (scanThis=="short"){
			$(mysyll).removeClass('long spondee').addClass('short short1 dactyl');
			longcount=0
			shortcount=1
			return
			}
		else{
			$(mysyll).removeClass('short dactyl').addClass('long long2 spondee endfoot');
			longcount=0
			return
			}
	}
	//we have one short
	else if (shortcount==1){
	        $(mysyll).removeClass("long spondee").addClass('short short2 endfoot dactyl');
			shortcount=0
			longcount=0
			return
	}   
}
function checkHexLine(myLine, metre){//most of the work is done in checkHexPattern()
	longcount=0;
	shortcount=0;
	var hemi=0;
    myNum=$(myLine).index();
    var sylls = $(myLine).find('.syll');
    var linelength = sylls.length        
    $(sylls).each(function(index){
    	checkHexPattern(this, index) 
    });
    	
    $(sylls).each(function(index){

        nextsyll = $(sylls[index + 1]);
        prevsyll = $(sylls[index - 1]);
        
        if ($(this).hasClass('long')){
            hemi++;
            if ((hemi % 2) == 0){
            	$(this).removeClass('dactyl startfoot').addClass('spondee endfoot')
            	$(prevsyll).removeClass('dactyl endfoot').addClass('spondee startfoot');
            }
        }
        if ($(this).hasClass('short') && $(nextsyll).hasClass('short')){
            hemi++;
            $(this).removeClass('spondee').addClass('dactyl');
            $(nextsyll).removeClass('spondee startfoot').addClass('dactyl endfoot');
            $(prevsyll).removeClass('spondee endfoot').addClass('dactyl startfoot');
        }       
        if (index == linelength-1||index == linelength-2){
        	$(this).removeClass('short res1 res2 nores').addClass('long')
        }
        if (index == linelength-1){
        	$(this).addClass('endfoot')
        }
    });     
    if (hemi > 13){ // change this to 12 after we fix the extra span problem
        $(myLine).append('<span class="hemi" style="color: red">'+hemi+'</span>');
    }
    //count number of startfoot, endfoot
    var starts = $(myLine).find('.startfoot').length;
    var ends = $(myLine).find('.endfoot').length;
    if (starts != 6 || ends != 6){
       $(myLine).append('<span class="feet" style="color: red">FEET</span>');
       }
}
function scanElegy(mypoem){
index=0
pentameter=true;
$(mypoem).find('.line').each(function(index){
pentameter=!pentameter;
linenum=index+1
$(this).attr('id',"line_" + linenum);
shortcount=0;
longcount=0;
var line = $(this);
//////////////console.log($(line).text());
if(pentameter==false){
    $(line).addClass('hexameter')
    scanHexameter(line);
    checkHexLine(line)
}
else{
    $(line).addClass('pentameter')
    scanPentameter(line);
    checkPentLine(line);
}
 });
}
function scanPent(line, index){
var shortcount = 0
var longcount = 0
var hemis = 0

sylls=$(line).find('.syll')
$(sylls).each(function(){
	mysyll=this
    var scanThis=getQty(mysyll)
    var lineno=index;
    var text=getText($(mysyll))
    var hasMacron=findLong(text);
    var hasDiphthong=findDiphthong(text);
    lastletter=text[text.length-1];

    //check for following siblings first!    
    if($(mysyll).is(':last-child')){
    var nexttext=getText($(mysyll).parent().next().children().eq(0))
    var nextsyll=$(mysyll).parent().next().children().eq(0);
    }
    else{
        var nexttext=getText($(mysyll).next())
        var nextsyll=$(mysyll).next();
    }
    if($(nextsyll).is(':last-child')){
    var next1text=getText($(nextsyll).parent().next().children().eq(0))
    var next1syll=$(nextsyll).parent().next().children().eq(0);
    }
    else{
        var next1text=getText($(nextsyll).next())
        var next1syll=$(nextsyll).next();
    }
	if($(mysyll).is(':first-child')){
        skipelided=0;
        if($(mysyll).parent().prev().children(':last').hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).parent().prev().children(':last').prev();
           }
        else{ 
        var prevosyll=$(mysyll).parent().prev().children(':last');
    }
    }
    else{
        skipelided=0;
        if($(mysyll).prev().hasClass('elided')){
            skipelided=1;
           var prevosyll=$(mysyll).prev().prev();
           }
        else{   
        var prevosyll=$(mysyll).prev();
    }
    }    
	var scanNext=getQty(nextsyll)
	var scanNext1=getQty(next1syll)
	
//2.  check pentameter by pattern
    if (index == 0){//first syll 
		$(mysyll).removeClass('short res1 res2 nores').addClass('syll long syll1 startfoot');
		longcount=1;
		shortcount=0;
		hemis++
		return
	}
	//code for second half of the line (raspberry blackberry pie)
	else if ( hemis == 4){
		$(mysyll).removeClass('short res1 res2 nores').addClass('long endhemi');
		hemis++
		return
	}
	else if ( hemis == 5){
		$(mysyll).removeClass('short res1 res2 nores').addClass('long starthemi startfoot dactyl');
		hemis++
		return
	}
	else if ( hemis == 6){
	$(mysyll).removeClass('long').addClass('short short1 dactyl');
	hemis++
	return
	}
	else if ( hemis == 7){
	$(mysyll).removeClass('long').addClass('short short2 endfoot dactyl');
	hemis++
	return
	}
	else if ( hemis == 8){
	$(mysyll).removeClass('short res1 res2 nores').addClass('long long1 startfoot dactyl');
	hemis++
	return
	}
	else if ( hemis == 9){
	$(mysyll).removeClass('long').addClass('short short1 dactyl');
	hemis++
	return
	}
	else if ( hemis == 10){
	$(mysyll).removeClass('long').addClass('short short2 endfoot dactyl');
	hemis++
	return
	}
	else if ( hemis == 11 ){
	$(mysyll).removeClass('short res1 res2 nores').addClass('long endhemi');
	hemis++
	return
	}
	
	//beginning of a foot or end of the halfline : must be long
	else if(longcount==0 && shortcount==0){
	    $(mysyll).removeClass('short res1 res2 nores').addClass('long long1 startfoot');
	    longcount=1
	    shortcount=0
	    hemis++
	    if ( hemis == 5){ //end of a halfline
	    	longcount = 0
	    }
		return
	}
	
	//decision point at Thesis
	else if(longcount==1){
	
		if (scanThis=="long" && scanNext=="long"){ //end of spondee
			$(mysyll).removeClass('short res1 res2 nores').addClass('long long2 spondee endfoot');
			longcount=0
			shortcount=0
			hemis++
			return
		}
		else if(scanThis=="short" && scanNext=="short"){
			$(mysyll).removeClass('long').addClass('short short1 dactyl');
			longcount=0
			shortcount=1
			return
		}
		else if (scanThis=="short" && scanNext=="long"){
			//rely on the long that's scanned next; long is usually scanned right
			$(mysyll).removeClass('short res1 res2 nores').addClass('long long2 spondee endfoot');
			longcount=0
			hemis++
			return
			}
		else if (scanThis=="short"){
			$(mysyll).removeClass('long spondee').addClass('short short1 dactyl');
			longcount=0
			shortcount=1
			return
			}
		else{
			$(mysyll).removeClass('short dactyl').addClass('long long2 spondee endfoot');
			longcount=0
			hemis++
			return
			}
	}
	//we have one short
	else if (shortcount==1){
	        $(mysyll).removeClass("long spondee").addClass('short short2 endfoot dactyl');
			shortcount=0
			longcount=0
			hemis++
			return
	}   
    
});

}
function scanPentameter(line){
var sylls = $(line).find('.syll');
syllLength = $(sylls).length;
i=0;
hemis=1;
//scan first two feet
while(hemis<5){
    if(checkElision(sylls[i])){
        $(sylls[i]).addClass('elided');
        i++;
    }
    else if (hemis==1 || hemis==3){
        $(sylls[i]).addClass('long');
        $(sylls[i]).addClass('startfoot');
        hemis++;
        i++;
    }
    else{
        checkPent(sylls[i], i);
        i++;
    }
}    
var unelided=0;
i=1;   
//scan back from end
while(unelided<8){
    num=syllLength-i;
    if(checkElision(sylls[num])){
       i++;
        $(sylls[num]).addClass('elided');
       ////////////console.log('eliding syllable from end: '+i)
    }
    else{
       quantity=pentEnd[unelided];
        ////////////console.log('adding class '+quantity+' to syll '+num);
        $(sylls[num]).removeClass("long short");
       $(sylls[num]).addClass(quantity);
        $(sylls[num]).addClass('endpattern');

        if(unelided!=0 && unelided!=7)
            $(sylls[num]).addClass('dactyl');
        if (unelided==1||unelided==4){
            $(sylls[num]).addClass('endfoot');
        }
        if (unelided==3||unelided==6){
            $(sylls[num]).addClass('startfoot');
        }
        if(quantity=="short"){
            removeMacron(sylls[num]);
        }
        
       i++;
       unelided++;       
       }
    }
//the following doesn't fix the problem at the end of the first hemiepes; sometimes long or short sylls are missed, so it's not just a prob with elision.
$(sylls).each(function(){
   if(!$(this).hasClass('short') && !$(this).hasClass('long') && !$(this).hasClass('elided')){
    if(checkElision($(this))){
        $(this).addClass('elided')
    }
      else{
          $(this).addClass('fixme');
      }
      }
});
}
function scanHexameter(line){
var sylls = $(line).find('.syll');
syllLength = $(sylls).length;  
$(sylls).each(function(index){
    syllable = $(sylls[index]);
    nextsyll = $(sylls[index + 1]);
    prevsyll = $(sylls[index -1]);
    ppsyll = $(sylls[index -2]);
    syllInWord = $(syllable).index();
    //what's the following for?
    if (syllable.hasClass('long')) {
        qty = "long"
    } else if (syllable.hasClass('short')) {
        qty = 'short'
    } else {
        qty = 'elided'
    }  
    //last syll always long
    if ($(syllable).parent().is(':last-child') && $(syllable).is(':last-child')){
    myLength="long"
    $(syllable).addClass('long endfoot spondee');
    }
    //first syll always long
    //else if ($(syllable).parent().is(':first-child') && $(syllable).is(':first-child') && !checkElision($(syllable))){
    else if ($(syllable).parent().is(':first-child') && $(syllable).is(':first-child')){

    myLength="long";
    $(syllable).addClass('long startfoot');
    longcount=1;
    }
    //last but one always long //
    else if ($(syllable).parent().is(':last-child') && $(syllable).next().is(':last-child')){
    myLength="long";
    $(syllable).addClass('long spondee');
    }   
    else {
        checkScan(syllable, index);
    }
  });//sylls.each function
$(sylls).each(function(){
   if(!$(this).hasClass('spondee') && !$(this).hasClass('dactyl') && !$(this).hasClass('elided')){
          $(this).addClass('fixme');
      }
});
}
function checkPentLine(myLine){  
    //for pentameter, we need to check that the two parts meet correctly    
    var hemi=0;
    myNum=$(myLine).index();
    var sylls = $(myLine).find('.syll');
    $(sylls).each(function(index){
        nextsyll = $(sylls[index + 1]);
        if ($(this).hasClass('short') && $(nextsyll).hasClass('short')){
            hemi++;
        }
        if ($(this).hasClass('long')){
            hemi++;
        }
    });
    if (hemi > 10){ // change this to 12 after we fix the extra span problem
        $(myLine).append('<span style="color: green">'+hemi+'</span>');
    }
    //count number of startfoot, endfoot
    var starts = $(myLine).find('.startfoot').length;
    var ends = $(myLine).find('.endfoot').length;
    if (starts != 4 || ends != 4){
       $(myLine).append('<span style="color: green">FEET</span>');
       }
}
function checkLine(line, metre){ //second pass scansion; get resolutions right etc.

if (metre == "an6cat" ||metre == "an4cat" ||metre == "an4" || metre == "an2"|| metre == "hen"|| metre == "da4"|| metre == "hex"|| metre == "asc1"|| metre == "glyc"){
		var sylls = $(line).find('.syll');
		$(sylls).each(function(index){
			$(this).removeClass("resolved res1 res2 res1p res2p")
		});
		return
	}
if (metre == "an8"){
		var sylls = $(line).find('.syll');
		$(sylls).each(function(index){
			$(this).removeClass("resolved res1 res2 res1p res2p")
		});
		return	
	}
if (metre == "an7"){
	var sylls = $(line).find('.syll');
		$(sylls).each(function(index){
			$(this).removeClass("resolved res1 res2 res1p res2p")
		});
		return
	}

if (metre == "tr7"){
		//console.log("passing to checkTr7")
		checkTr7(line)
		return
	}
if (metre == "ia7"){
		////console.log("passing to checkTr7")
		checkia7(line)
		return
	}	
	
	//console.log('checking senarius')
	var sylls = $(line).find('.syll');
	linelength=sylls.length
	lastone=linelength-1
	$(sylls[lastone]).removeClass("short").addClass("long")
	var shorts = $(line).find('.short');
	pattern=metre
	var shortcount=0;
	j=0;
	var resolutions=0;
	var hemis=0;
	
//when we get to a long, count the previous shorts and decide which are resolved
if(metre == "ia6"){
$(sylls).each(function(index){
    	if($(this).hasClass('long')){
    			if (shortcount == 6){  //ssss|ss
    				//console.log("whoa! 6 shorts!")
    				short6=findPrev($(line), $(this))
    				short5=findPrev($(line), short6)
    				short4=findPrev($(line), short5)
    				short3=findPrev($(line), short4)
    				short2=findPrev($(line), short3)
    				short1=findPrev($(line), short2)

    				$(short6).addClass('resolved res2')
    				$(short5).addClass('resolved res1')
    				$(short4).addClass('resolved res2')
    				$(short3).addClass('resolved res1')
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')
    				hemis+=3
    			}
    			else if (shortcount == 5){  
    			//ssss|s			
    			    //console.log("phew! 5 shorts!")
	    			short5=findPrev($(this),0)
    				short4=findPrev($(this),1)
    				short3=findPrev($(this), 2)
    				short2=findPrev($(this), 3)
    				short1=findPrev($(this), 4)
    				if (hemis == 0 || hemis == 4 || hemis == 8){
    				$(short5).addClass('short nores')
    				$(short4).addClass('resolved res2')
    				$(short3).addClass('resolved res1')
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')
    				}
    				else if (hemis == 1 || hemis == 5 || hemis == 9){
    				$(short5).addClass('resolved res2')
    				$(short4).addClass('resolved res1')
    				$(short3).addClass('short nores')
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')
    				}
    				else if (hemis == 2 || hemis == 6 || hemis == 10){
    				$(short5).addClass('resolved res2')
    				$(short4).addClass('resolved res1')
    				$(short3).addClass('resolved res2')
    				$(short2).addClass('resolved res1')
    				$(short1).addClass('short nores')
    				}
    				else{
    				$(short4).addClass('resolved res2')
    				$(short3).addClass('resolved res1')
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')
    				}
    				hemis+=3
    			}
    			else if (shortcount == 4){  //ssss
    			    //console.log("We have 4 shorts!")

    				short4=findPrev($(this),0)
    				short3=findPrev($(this), 1)
    				short2=findPrev($(this), 2)
    				short1=findPrev($(this), 3)
    				$(short4).removeClass('short res1 res2 nores resolved')
    				$(short3).removeClass('short res1 res2 nores resolved')
    				$(short2).removeClass('short res1 res2 nores resolved')
    				$(short1).removeClass('short res1 res2 nores resolved') 
    				if (hemis % 2 == 1){
    				//console.log("4 shorts, 2 sylls")
    				$(short4).removeClass('res1').addClass('syll short resolved res2')
    				$(short3).removeClass('res2').addClass('syll short resolved res1')
    				$(short2).removeClass('res1').addClass('syll short resolved res2')
    				$(short1).removeClass('res2').addClass('syll short resolved res1') 
    				}
    				else{
    				//console.log("4 shorts, 3 sylls: shortcount is " + shortcount)
    				$(short4).removeClass("resolved res1 res2").addClass('syll short nores')
    				$(short3).removeClass("res2").addClass('syll short resolved res2')
    				$(short2).removeClass("res1").addClass('syll short resolved res1')
    				$(short1).removeClass("resolved res1 res2").addClass('syll short nores')     				
    				}  				
    				hemis+=2
    			}
    			else if (shortcount == 3){ //ss-s or s-ss
					//improve this to resolve sylls in same word
					//for seneca, check for pos 3, 7, 11
					//console.log("3 shorts here")
    				short3=findPrev($(this), 0)
    				short2=findPrev($(this), 1)
    				short1=findPrev($(this), 2)
    				
    				if (hemis == 2 || hemis == 6 || hemis == 10){ //first must be nores
    				    //console.log("even hemis:first short nores")
    					$(short3).removeClass('res1').addClass('syll short resolved res2')
    					$(short2).removeClass('res2').addClass('syll short resolved res1')
    				}
    				else if(hemis == 1 || hemis == 5 || hemis == 9){ //first must be nores
    				    //console.log("uneven hemis:last short nores")

    					$(short2).removeClass('res1').addClass('syll short resolved res2')
    					$(short1).removeClass('res2').addClass('syll short resolved res1')
    				}   				
					else if( $(short1).parent() == $(short2).parent()){
					    //console.log("avoiding split resolution")
					    $(short2).removeClass('res1').addClass('syll short resolved res2')
    					$(short1).removeClass('res2').addClass('syll short resolved res1')
					}
					else{
    				$(short2).removeClass('res1').addClass('syll short resolved res2')
    				$(short1).removeClass('res2').addClass('syll short resolved res1')  
    				}
    				hemis+=2
    			}
    			else if (shortcount==2){ //ss = l
    				//console.log("pair of shorts")
    			    short2=findPrev($(this), 0)
    				short1=findPrev($(this), 1)

    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')  
	    			hemis+=1
    			}
    			else if (shortcount==1){
	    			hemis+=1
	    				    			
    			}
    	shortcount=0;
    	hemis++;
    	myqty="l";
    	}
    	else if($(this).hasClass('short')){
    			myqty='s'
    			shortcount++    			
    			if($(this).hasClass('res1')){
    				return
    			}
    			if($(this).hasClass('res2')){
    				myqty='l'
    			}
    	}
    	else if($(this).hasClass('elided')){
    		myqty = 'elided'
    	}

	});
	$('.res1p').removeClass('nores res2 long').addClass('syll short resolved res1 res1p');
	$('.res2p').removeClass('nores res1 long').addClass('syll short resolved res2 res2p');
	$('.nores').removeClass('res1 res2 res1p res2p long resolved').addClass('syll short nores');
	
//now check against the pattern
	j=0;
	$(sylls).each(function(index){
	$(this).removeClass('footstart footend caesura hemi1 hemi2 hemi3 hemi4 hemi5 hemi6 hemi7 hemi8 hemi9 hemi10 hemi11 hemi12 hemi13 hemi14 hemi15 hemi16 hemi17')
	$(this).removeClass('foot1 foot2 foot3 foot4 foot5 foot6 foot7 foot8 foot9 foot10')
	if($(this).hasClass('elided')){
    		myqty = 'elided'
    	}
    else if ($(this).hasClass('long')){
    		myqty = 'l'
    	}
    else if ($(this).hasClass('short')){
    		myqty = 's'
    	}
    if($(this).hasClass('res1')){
			return
		}
	if ($(this).hasClass('res2')){
    		myqty = 'l'
    	}
    if(myqty != 'elided' && myqty != 'res'){
    		expected=senarii[j];
    		//////console.log("expecting " + expected)
    		//////console.log("got " + myqty)
    		j++;
    		if (metre=="ia6"){
    			if (expected != "x" && myqty != expected && !$(this).hasClass('hypermetric')){
    				//$(this).addClass('wrong '+ expected);
    			}
    		}
    	}    	
    });//end of sylls.each
    
//now mark up for css (feet, caesura)
    	caesura=0;
    	var count = 1;
    	var resolved = 0;
    	var hemis=0;
		$(sylls).each(function(index){
			
			if($(this).hasClass('elided')){
				return
			}
			if($(this).hasClass('resolved')){
				if (resolved==1){
					resolved=0;
					$(this).addClass("res2")
					}
					else {
					resolved++;
					hemis++;
					$(this).addClass("res1")
					}
			}
			else {
				hemis++;// long or unresolved short is a half foot
				if($(this).hasClass('short') && (hemis==1||hemis==5||hemis==9)){
					sylltext=$(this).text()
					//check for uia
					var i = sylltext.length;
					var found = 0
					while (i--) {
  						mychar = sylltext.charAt(i);
  						if (shortlong.indexOf(mychar) > -1){
  							found=found+1
  						}
					}
					if (found == 1){ //single a/i/u
					wordtext=$(this).parent().text()
					if (wordtext=="ὑμεῖς" || wordtext=="ὑμῖν" || wordtext=="ὑμᾶς" || wordtext=="ὑμῶν"){
						$(this).removeClass("short res1 res2 res1p res2p resolved").addClass("long")
					}
					else{
						$(this).addClass("shortanceps")
						}
					}
				}
			}
			foot=(hemis + (hemis % 2)) / 2;
			$(this).addClass("hemi"+hemis);

			$(this).addClass("foot"+foot);
			if (hemis%2==0 && resolved != 1){
				$(this).addClass("footend")
			}
			//check for caesura:
			if(hemis==5 && $(this).is(':last-child') && caesura == 0  && resolved != 1){
				$(this).addClass('caesura');
				caesura=1;
			}
			else if (hemis==7 && $(this).is(':last-child') && caesura == 0  && resolved != 1){
				$(this).addClass('caesura');
				caesura=1;
			}
		}); 
		
//now check end of line formula
	if (!$(sylls).eq(linelength-2).hasClass('short') || !$(sylls).eq(linelength-3).hasClass('footend')){ 
		$(sylls).eq(linelength-2).addClass('wrong fixme')
		}		

	$(sylls).each(function(index){
		if ($(this).hasClass('footend') && $(this).hasClass('short') && !$(this).hasClass('res2')){
			$(this).addClass('wrong fixme');
		}
	});
}
}
function checkia7(line){
	var sylls = $(line).find('.syll');
	linelength=sylls.length
	var shorts = $(line).find('.short');
	pattern=metre
	shortcount=0;
	j=0;
	var resolutions=0;
	var hemis=0;
	
//when we get to a long, count the previous shorts and decide which are resolved
    $(sylls).each(function(index){
    	$(this).removeClass('endcretic')
    	if($(this).hasClass('long')){
    			if (shortcount == 6){  //ssss|ss
    				short6=findPrev($(this),0)
    				short5=findPrev($(this),1)
    				short4=findPrev($(this),2)
    				short3=findPrev($(this),3)
    				short2=findPrev($(this),4)
    				short1=findPrev($(this),5)

    				$(short6).addClass('resolved res2')
    				$(short5).addClass('resolved res1')
    				$(short4).addClass('resolved res2')
    				$(short3).addClass('resolved res1')
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')
    				hemis+=3
    			}
    			if (shortcount == 5){  
    			//ssss|s				
    				short4=findPrev($(this),1)
    				short3=findPrev($(this), 2)
    				short2=findPrev($(this), 3)
    				short1=findPrev($(this), 4)
    				$(short4).addClass('resolved res2')
    				$(short3).addClass('resolved res1')
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')
    				hemis+=3
    			}

    			if (shortcount == 4){  //ssss
    				short4=findPrev($(this),0)
    				short3=findPrev($(this), 1)
    				short2=findPrev($(this), 2)
    				short1=findPrev($(this), 3)
    				$(short4).addClass('resolved res2')
    				$(short3).addClass('resolved res1')
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')    				
    				hemis+=2
    			}
    			else if (shortcount == 3 && hemis % 2 == 1){ //s-ss
    			    short2=findPrev($(this),0)
    				short1=findPrev($(this), 1)
    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')  
    				hemis+=2
    			}
    			else if (shortcount == 3 && hemis % 2 == 0){ //ss|s

    				short2=findPrev($(this), 1)
    				short1=findPrev($(this), 2)

    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')  
    				hemis+=2
    			}
    			else if (shortcount==2){ //ss = l
    			
    			    short2=findPrev($(this), 0)
    				short1=findPrev($(this), 1)

    				$(short2).addClass('resolved res2')
    				$(short1).addClass('resolved res1')  
	    			hemis+=1
    			}
    			else if (shortcount==1){
	    			hemis+=1
    			}
    	shortcount=0;
    	hemis++;
    	myqty="l";
    	}
    	else if($(this).hasClass('short')){
    			myqty='s'
    			shortcount++
    			
    			if($(this).hasClass('res1')){
    				return
    			}
    			if($(this).hasClass('res2')){
    				myqty='l'
    			}
    	}
    	else if($(this).hasClass('elided')){
    		myqty = 'elided'
    	}

	});
	$('.res1p').removeClass('res2 res2p').addClass('syll short resolved res1 res1p');
	$('.res2p').removeClass('res1 res1p').addClass('syll short resolved res2 res2p');
	$('.nores').removeClass('resolved res2 res1').addClass('syll short nores');
//now check against the pattern
	j=0;
	$(sylls).each(function(index){
	$(this).removeClass('footstart footend caesura hemi1 hemi2 hemi3 hemi4 hemi5 hemi6 hemi7 hemi8 hemi9 hemi10 hemi11 hemi12 hemi13 hemi14 hemi15 hemi16 hemi17')
	$(this).removeClass('foot1 foot2 foot3 foot4 foot5 foot6 foot7 foot8 foot9 foot10')
	if($(this).hasClass('elided')){
    		myqty = 'elided'
    	}
    else if ($(this).hasClass('long')){
    		myqty = 'l'
    	}
    else if ($(this).hasClass('short')){
    		myqty = 's'
    	}
    if($(this).hasClass('res1')){
			return
		}
	if ($(this).hasClass('res2')){
    		myqty = 'l'
    	}
    if(myqty != 'elided' && myqty != 'res'){
    		expected=senarii[j];
    		//////console.log("expecting " + expected)
    		//////console.log("got " + myqty)
    		j++;
    		/*
    		if (expected != "x" && myqty != expected && !$(this).hasClass('hypermetric')){
    			$(this).addClass('wrong '+ expected);
    		}
    		*/
    	}    	
    });//end of sylls.each
    
//now mark up for css (feet, caesura)
    	caesura=0;
    	var count = 1;
    	var resolved = 0;
    	var hemis=0;
		$(sylls).each(function(index){
			
			if($(this).hasClass('elided')){
				return
			}
			if($(this).hasClass('resolved')){
				if (resolved==1){
					resolved=0;
					if (!$(this).hasClass('res2') && !$(this).hasClass('res1')){
					$(this).addClass("res2")
					}
					}
					else{
					resolved++;
					hemis++;
					if (!$(this).hasClass('res2') && !$(this).hasClass('res1')){
					$(this).addClass("res1")
					}
					}
			}
			else {
				hemis++;// long or unresolved short is a half foot
			}
			foot=(hemis + (hemis % 2)) / 2;
			$(this).addClass("hemi"+hemis);

			$(this).addClass("foot"+foot);
			if (hemis%2==0 && resolved != 1){
				$(this).addClass("footend")
			}
			//check for caesura:
			/*
			if(hemis==5 && $(this).is(':last-child') && caesura == 0  && resolved != 1){
				$(this).addClass('caesura');
				caesura=1;
			}
			else if (hemis==7 && $(this).is(':last-child') && caesura == 0  && resolved != 1){
				$(this).addClass('caesura');
				caesura=1;
			}
			*/
		});
}
function checkTr7(myline){
	////console.log('tr7 initial check')
	var line=myline
	var sylls = $(line).find('.syll');
	var shortcount=0;
	var j=0;
	var resolutions=0;
	var hemis=0;
	var longs=0
	$(sylls).each(function(index){
		$(this).removeClass('res1 res2 resolved endcretic iamb')
		if (hemis > 2){
		// send the rest of the line to the senarii routine
		//what if we don't get a "long" in time to do that?
		//maybe just copy that routine here
		$(this).addClass('iamb')
		}
		if (hemis < 4){
		if($(this).hasClass('long')){
			if (shortcount==4){ // ss-ss in initial cretic
				short4=findPrev($(this),0)
				short3=findPrev($(this), 1)
				short2=findPrev($(this), 2)
				short1=findPrev($(this), 3)
				$(short4).addClass('resolved res2')
				$(short3).addClass('resolved res1')
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')    				
				hemis+=2
				if(hemis==3){
					$(short4).addClass('endcretic')
					$(this).addClass('iamb')
				}
			}
			else if (shortcount == 3 && hemis == 0){ //ss-s in initial cretic
				short2=findPrev($(this),1)
				short1=findPrev($(this), 2)
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')  
				hemis+=2
				$(this).addClass('endcretic')
    		}
			else if (shortcount == 3 && hemis  == 1){ //s-ss in initial cretic
				short2=findPrev($(this),0)
				short1=findPrev($(this), 1)
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1') 
				$(short2).addClass('endcretic')
				$(this).addClass('iamb')
				hemis+=2
    		}
    		else if (shortcount==2){
    			short2=findPrev($(this),0)
				short1=findPrev($(this), 1)
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1') 
				hemis+=1
				if(hemis==3){
					$(short2).addClass('endcretic')
					$(this).addClass('iamb')
				}
				else if(hemis==2){
					$(this).addClass('endcretic')
				}
    		}
    		else if (hemis == 0 && shortcount == 5){
				short5=findPrev($(this), 0)
				short4=findPrev($(this), 1)
				short3=findPrev($(this), 2)
				short2=findPrev($(this), 3)
				short1=findPrev($(this), 4)
				$(short5).addClass('resolved res2 endcretic')
				$(short4).addClass('resolved res1')
				$(short3).addClass('short')
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1') 
				$(this).addClass('iamb')
				hemis+=3;
			}
			else if (shortcount==1){
				hemis+=1
				if(hemis==2){
				$(this).addClass('endcretic')
				}
			}
			else if (hemis==2){
				$(this).addClass('endcretic')
			}
		shortcount=0;
    	hemis++; // add hemi for this long
    	myqty="l"; // for checking against pattern	
		} //end of this hasClass long
		if($(this).hasClass('short')){
			myqty='s'
			shortcount++  			
			if($(this).hasClass('res1')){
				return 
			}
			if($(this).hasClass('res2')){
				myqty='l'
			}
		}
		else if($(this).hasClass('elided')){
    		myqty = 'elided'
    	}
		}//end of hemis < 4; initial cretic is now  scanned
		// now we can use the senarii check
		else{
		    if($(this).hasClass('long')){
			if (shortcount == 6){  //ssss|ss
				short6=findPrev($(line), $(this))
				short5=findPrev($(line), short6)
				short4=findPrev($(line), short5)
				short3=findPrev($(line), short4)
				short2=findPrev($(line), short3)
				short1=findPrev($(line), short2)

				$(short6).addClass('resolved res2')
				$(short5).addClass('resolved res1')
				$(short4).addClass('resolved res2')
				$(short3).addClass('resolved res1')
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')
				hemis+=3
			}
			if (shortcount == 5){  
			//ssss|s				
				short4=findPrev($(this),1)
				short3=findPrev($(this), 2)
				short2=findPrev($(this), 3)
				short1=findPrev($(this), 4)
				$(short4).addClass('resolved res2')
				$(short3).addClass('resolved res1')
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')
				hemis+=3
			}

			if (shortcount == 4){  //ssss
				short4=findPrev($(this),0)
				short3=findPrev($(this), 1)
				short2=findPrev($(this), 2)
				short1=findPrev($(this), 3)
				$(short4).addClass('resolved res2')
				$(short3).addClass('resolved res1')
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')    				
				hemis+=2
			}
			else if (shortcount == 3 && hemis % 2 == 1){ //s-ss
				short2=findPrev($(this),0)
				short1=findPrev($(this), 1)
				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')  
				hemis+=2
			}
			else if (shortcount == 3 && hemis % 2 == 0){ //ss|s

				short2=findPrev($(this), 1)
				short1=findPrev($(this), 2)

				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')  
				hemis+=2
			}
			else if (shortcount==2){ //ss = l
			
				short2=findPrev($(this), 0)
				short1=findPrev($(this), 1)

				$(short2).addClass('resolved res2')
				$(short1).addClass('resolved res1')  
				hemis+=1
			}
			else if (shortcount==1){
				hemis+=1
			}
    	shortcount=0;
    	hemis++;
    	myqty="l";
    	}
    	else if($(this).hasClass('short')){
    			myqty='s'
    			shortcount++
    			
    			if($(this).hasClass('res1')){
    				return
    			}
    			if($(this).hasClass('res2')){
    				myqty='l'
    			}
    	}
    	else if($(this).hasClass('elided')){
    		myqty = 'elided'
    	}
	$('.res1p').removeClass('res2 res2p').addClass('syll short resolved res1 res1p');
	$('.res2p').removeClass('res1 res1p').addClass('syll short resolved res2 res2p');
	$('.nores').removeClass('resolved res1 res2 res1p res2p').addClass('syll short nores');
	}//end of else, not < 4 hemis, = end of senarii check	
	});//end of sylls each
	//At this point we have resolutions marked in the cretic and senarius parts
	//TODO: mark the dieresis at the senarius caesura
	//TODO: mark feet according to trochaic schema
	//check for errors:
	// - simple cretic pattern at end of line
	var	caesura=0;
    var count = 1;
    var resolved = 0;
    var ihemis=0;
    var iambs=$(line).find('.iamb')
	$(iambs).each(function(index){
		$(this).removeClass('footstart footend caesura hemi1 hemi2 hemi3 hemi4 hemi5 hemi6 hemi7 hemi8 hemi9 hemi10 hemi11 hemi12 hemi13 hemi14 hemi15 hemi16 hemi17')
		$(this).removeClass('foot1 foot2 foot3 foot4 foot5 foot6 foot7 foot8 foot9 foot10')
			if($(this).hasClass('elided')){
				return
			}
			if($(this).hasClass('resolved')){
				if (resolved==1){
					resolved=0;
					$(this).addClass("res2")
					}
					else {
					resolved++;
					ihemis++;
					$(this).addClass("res1")
					}
			}
			else {
				ihemis++;// long or unresolved short is a half foot
			}
			foot=(ihemis + (ihemis % 2)) / 2;
			$(this).addClass("hemi"+ihemis);

			$(this).addClass("foot"+foot);
			if (ihemis%2==0 && resolved != 1){
				$(this).addClass("footend")
			}
			//check for caesura:
			if(ihemis==5 && $(this).is(':last-child') && caesura == 0  && resolved != 1){
				$(this).addClass('caesura');
				caesura=1;
			}
			else if (ihemis==7 && $(this).is(':last-child') && caesura == 0  && resolved != 1){
				$(this).addClass('caesura');
				caesura=1;
			}
		}); 
		
//now check end of line formula
	if (!$(iambs).eq(linelength-2).hasClass('short') || !$(iambs).eq(linelength-3).hasClass('footend')){ 
		$(iambs).eq(linelength-2).addClass('wrong fixme')
		}		

	$(iambs).each(function(index){
		if ($(this).hasClass('footend') && $(this).hasClass('short') && !$(this).hasClass('res2')){
			$(this).addClass('wrong fixme');
		}
	});
	
}
function scanSenarii(myline, metre){ //first pass scansion
		var hemis=0
		var line = $(myline);
		var pos = 0;
		var i = 0;
		var foot=1;
		var metron=1;
		var shortcount=0;
		var longcount=0;
		var tetrabrach=false;
		$(line).addClass(metre)
		var sylls = $(line).find('.syll');
		var syllLength = $(sylls).length;
		resolutions = syllLength - 12
	
		$(sylls).each(function(index){
			var syllo=getText(this);
			var last3 = syllo.substr(syllo.length - 3)

    		if ((findLong(syllo) || findDiphthong(syllo) || makePosition($(this))==true) && syllo[syllo.length -1] != "&"){
					$(this).addClass('long');
	    	}

	    	else if (resolutions == 0 && (index % 2 == 1)){
	    		$(this).addClass('long');
	    	}
	    	else if (jQuery.inArray(last3, longsylls) != -1){
	    		$(this).addClass('long checkme');
	    	}
	    	else{
	    		$(this).addClass('short');	    	
	    	}
	    	if (resolutions == 0 && jQuery.inArray(index+1, defshort) != -1){
	    		$(this).removeClass('long').addClass('short');
	    	}
		}); //end sylls.each
}
function scanLine(myline, metre){
		//console.log("running scanline")
		var hemis=0
		var line = $(myline);
		var pos = 0;
		var i = 0;
		var foot=1;
		var metron=1;
		var shortcount=0;
		var longcount=0;
		var tetrabrach=false;
		
		$(line).addClass(metre)
		var sylls = $(line).find('.syll');
		var syllLength = $(sylls).length;
		
		$(sylls).each(function(index){
			$(this).removeClass('resolved res1 res2 res1p res2p');
			var syllo=$(this).text().replace(/:,.;᾽·;[\]\[()\?.:;,\!\"\'\s*]/g, "");
    		if(checkElision(this)){
        	$(this).removeClass('long short res1 res2').addClass('syll elided');
        	////////console.log("eliding " + syllo);
        	return;
    		}
    		else if ((findLong(syllo) || findDiphthong(syllo) || makePosition($(this))==true) && syllo[syllo.length -1] != "&"){
					$(this).removeClass('short res1 res2 resolved res1p res2p').addClass('syll long');
	    	}
	    	else{
	    	$(this).removeClass('long').addClass('syll short');	    	
	    	}
	    	if(index==0 && metre=="hexameter"){
	    		$(this).removeClass("short").addClass('syll long');
	    	}
		}); //end sylls.each
}
function checkTriads(poem){
	strophes=$(poem).find('.strophe')
	var strophelength=strophes.length
	strophe1=$(strophes).eq(0)
	//console.log("strophes in poem: "+strophes.length)
	epodes=$(poem).find('.Epode')
	var epodelength=epodes.length
	epode1=$(epodes).eq(0)

	//console.log("epodes in poem: "+epodes.length)
	
	strophes.each(function(index){
		var strophenum=index;
		$(this).find('.line').each(function(index){
			$(this).addClass('checked')
			linelen=$(this).find('.syll').length
			//console.log("length for line "+index+": "+linelen)
			patternline=$(strophe1).find('.line').eq(index)
			patternlen=$(patternline).find('.syll').length
			//console.log("length for pattern: "+patternlen)

			/*
			if(linelen != patternlen){
				$(this).addClass('checklen')
				//change this to take into account resolutions
				//return true;
			}
			else{
				$(this).removeClass("checklen")
			}
			*/
			var syllnum=0
			$(this).find('.syll').each(function(index){	
				
				patternsyll=$(patternline).find('.syll').eq(syllnum)
				if($(patternsyll).hasClass('long') && $(this).hasClass("res1")){
				return;
				}
				if($(patternsyll).hasClass('res1') && $(this).hasClass("long")){
				//advance one further in the pattern
				syllnum+=1;
				//read new pattern syllable
				patternsyll=$(patternline).find('.syll').eq(syllnum)
				}
				syllnum += 1
				
				//add this back in when all the initial strophes have been checked for word div
				if($(patternsyll).hasClass('worddiv')){
					$(this).addClass("worddiv")
				}				
				
				/*
				if($(patternsyll).hasClass('long')){
					rightlength="long"
				}
				else{
					rightlength="short"
				}
				if ($(patternsyll).hasClass('notlong')){
					rightlength="short"
				}
				if ($(patternsyll).hasClass('notshort')){
					rightlength="long"
				}
				if (!$(this).hasClass(rightlength)){
					$(this).addClass("checkme")
				}
				else{
					$(this).removeClass("checkme")
				}
				if ($(patternsyll).hasClass('link')){
					$(this).addClass("link")				
					}
				else{
					$(this).removeClass("link")
				}
				*/
				
				//add logic for word div now
				//for word div, exclude resolved shorts, elided sylls (')
				//if this is word div and pattern is word div, add worddiv class to pattern
				//else add noworddiv to pattern

				/*
				
				patterntext = $(patternsyll).text()
				thistext = $(this).text()

				if($(this).is(':last-child') && $(patternsyll).is(':last-child')){
					if(patterntext.slice(-1)=="᾽" || thistext.slice(-1)=="᾽" ){
						$(patternsyll).addClass('nodiv')
					return;
					}
					if($(patternsyll).hasClass('res1')||$(this).hasClass("res1")){
						$(patternsyll).addClass('nodiv')
					}
					else {
						$(patternsyll).addClass('worddiv')						
					}			
				}
				else{
					$(patternsyll).addClass('nodiv')
				}
				//if this is last strophe, check for worddiv/noworddiv in pattern
					//if pattern has worddiv and not noworddiv, add worddiv to all sylls
					//else remove worddiv and noworddiv from pattern (cleaning up)
					
				if(strophenum==strophelength-1){//last strophe
					if ($(patternsyll).hasClass('nodiv')){
						$(patternsyll).removeClass('worddiv nodiv')
					}
				}
				*/
			});
		});
	});
	
	epodes.each(function(index){
		var epodenum=index;
		
		$(this).find('.line').each(function(index){
			$(this).addClass('checked')
			linelen=$(this).find('.syll').length
			//console.log("length for line "+index+": "+linelen)
			patternline=$(epode1).find('.line').eq(index)
			patternlen=$(patternline).find('.syll').length
			//console.log("length for pattern: "+patternlen)
			
			$(this).removeClass('checklen')
			var syllnum=0

			$(this).find('.syll').each(function(index){
				patternsyll=$(patternline).find('.syll').eq(syllnum)
				if($(patternsyll).hasClass('long') && $(this).hasClass("res1")){
				return;
				}
				if($(patternsyll).hasClass('res1') && $(this).hasClass("long")){
				//advance one further in the pattern
				syllnum+=1;
				//read new pattern syllable
				patternsyll=$(patternline).find('.syll').eq(syllnum)
				}
				syllnum += 1

				
				//add this back in when all the initial epodes have been checked for word div
				
				if($(patternsyll).hasClass('worddiv')){
					$(this).addClass("worddiv")
				}				
				
				
				/*
				if($(patternsyll).hasClass('long')){
					rightlength="long"
				}
				else{
					rightlength="short"
				}
				if ($(patternsyll).hasClass('notlong')){
					rightlength="short"
				}
				if ($(patternsyll).hasClass('notshort')){
					rightlength="long"
				}
				if (!$(this).hasClass(rightlength)){
					$(this).addClass("checkme")
				}
				else{
					$(this).removeClass("checkme")
				}
				if ($(patternsyll).hasClass('link')){
					$(this).addClass("link")				
					}
				else{
					$(this).removeClass("link")
				}
				*/
				//add logic for word div now
				//for word div, exclude resolved shorts, elided sylls (')
				//if this is word div and pattern is word div, add worddiv class to pattern
				//else add noworddiv to pattern

				
				/* Turn this off to add classes to all stanzas
				patterntext = $(patternsyll).text()
				thistext = $(this).text()

				if($(this).is(':last-child') && $(patternsyll).is(':last-child')){
					if(patterntext.slice(-1)=="᾽" || thistext.slice(-1)=="᾽" ){
						$(patternsyll).addClass('nodiv')
					return;
					}
					if($(patternsyll).hasClass('res1')||$(this).hasClass("res1")){
						$(patternsyll).addClass('nodiv')
					}
					else {
						$(patternsyll).addClass('worddiv')						
					}			
				}
				else{
					$(patternsyll).addClass('nodiv')
				}
				//if this is last strophe, check for worddiv/noworddiv in pattern
					//if pattern has worddiv and not noworddiv, add worddiv to all sylls
					//else remove worddiv and noworddiv from pattern (cleaning up)
					
				if(epodenum==epodelength-1){//last strophe
					if ($(patternsyll).hasClass('nodiv')){
						$(patternsyll).removeClass('worddiv nodiv')
					}
				}
				*/
			});
		});
	});



}

//Editing Functions:===============
// if you want to edit this for your own workflow, look at https://swisnl.github.io/jQuery-contextMenu/
function addWord(syll){
	//console.log("adding word")
	var word=$(syll).closest('.word')
	//console.log($(word).text())
	var wtext=prompt("Word Text, use - for sylls:", "");
	var wtarr=wtext.split("-")
	var newstring="<span class=\'word\'>"
	$.each(wtarr, function(i, val){
		newstring=newstring+"<span class=\'syll short\'>"+val+"</span>"
	});
	newstring=newstring+"</span>"
	//console.log(newstring)
	$(newstring).insertAfter(word);//wtf???????
}
function shift3(syll, line){
	if ($(syll).hasClass('long') || $(syll).hasClass('elided')){
		return
	}
	var next = findNext(syll, 0)
	var nextplus = findNext(syll, 1)
	if ($(syll).hasClass('res1')){
		$(syll).removeClass('res1 res2 long resolved res1p res2p').addClass('syll nores short')
		$(next).removeClass('nores res2 res2p long').addClass('syll short res1 res1p resolved')
		$(nextplus).removeClass('nores res1 res1p long').addClass('syll short res2 res2p resolved')	
	}
	else{
		$(syll).removeClass('long res2 nores res2p').addClass('syll short res1 res1p resolved')
		$(next).removeClass('long nores res1 res1p').addClass('syll short res2 res2p resolved')
		$(nextplus).removeClass('long resolved res1 res2 res1p res2p').addClass('syll short nores')		
	}
	dontcheck=1
}
function shift4(syll, line){
	if ($(syll).hasClass('long') || $(syll).hasClass('elided')){
		return
	}
	var next = findNext(syll, 0)
	var nextplus = findNext(syll, 1)
	var next2 = findNext(syll, 2)
	if (!$(next).hasClass('res1')){
		$(syll).removeClass('long resolved res1 res2 res1p res2p').addClass('syll nores short')
		$(next).removeClass('long nores res2 res2p').addClass('syll short res1 res1p resolved')
		$(nextplus).removeClass('long nores res1 res1p').addClass('syll short res2 res2p resolved')
		$(next2).removeClass('long resolved res1 res2 res1p res2p').addClass('syll nores short')
	
	}
	else{
		$(syll).removeClass('long nores res2 res2p').addClass('syll short res1 res1p resolved')
		$(next).removeClass('long nores res1 res1p').addClass('syll short res2 res2p resolved')
		$(nextplus).removeClass('long nores res2 res2p').addClass('syll short res1 res1p resolved')
		$(next2).removeClass('long nores res1 res1p').addClass('syll short res2 res2p resolved')
		
	}
	dontcheck=1
}
function editPage(syll, action){
//	backup=line
	poem=$(syll).closest('.poem')
	line=$(syll).closest('.line')
	word=$(syll).closest('.word')
	metre=$(line).data('metre')
	if (action == "short"){$(syll).removeClass('long nores resolved res1 res2 res1p res2p').addClass('syll short');};
	if (action == "notshort"){$(syll).addClass('notshort');};
	if (action == "long"){$(syll).removeClass('short nores resolved res1 res2 res1p res2p').addClass('syll long');};
	if (action == "notlong"){$(syll).addClass('notlong');};
	if (action == "elided"){$(syll).removeClass('long short nores resolved res1 res2 res1p res2p').addClass('syll elided');};
	if (action == "checktriads"){checkTriads(poem)};
	if (action == "synizesis"){
		thattext=$(syll).prev().text()
		thistext=$(syll).text()
		$(syll).text(thattext+thistext)
		$(syll).prev().remove()
		$(syll).addClass('synizesis')		
		};
	if (action == "join"){
		thattext=$(syll).prev().text()
		thistext=$(syll).text()
		$(syll).text(thattext+thistext)
		$(syll).prev().remove();
		checkTriads(poem)
	};
	if (action == "wordjoin"){
		thattext=$(word).prev().text()
		thistext=$(syll).text()
		$(syll).text(thattext+thistext)
		$(word).prev().remove();
		checkTriads(poem)
	};	
	
	if (action == "hiatus"){$(syll).addClass('hiatus')};
	if (action == "res1"){$(syll).removeClass('long nores res2 res2p').addClass('syll short resolved res1 res1p');};
	if (action == "res2"){$(syll).removeClass('long nores res1 res1p').addClass('syll short resolved res2 res2p ');};
	if (action == "nores"){$(syll).removeClass('long resolved res1 res2 res1p res2p').addClass('syll short nores')};
	if (action == "delete"){
		thistext=$(syll).text()
		if(confirm("Delete "+thistext+"?")){		
			if ($(syll).is(':only-child')){
				$(syll).parent().remove()
			}
			else{
				$(syll).remove()
			}
		}		
	}
	if (action == "shift3"){
		shift3(syll, line)
	}
	if (action == "shift4"){
		shift4(syll, line)
	}
	if (action == "macron"){
		thistext=$(syll).text()
		if (findLong(thistext)){
			newtext=thistext.replace(/ā/gi,"a");
			newtext=newtext.replace(/ē/gi,"e");
			newtext=newtext.replace(/ī/gi,"i");
			newtext=newtext.replace(/ō/gi,"o");
			newtext=newtext.replace(/ū/gi,"u");
    	}
    	else {
			newtext=thistext.replace(/a/gi,"ā");
			newtext=newtext.replace(/e/gi,"ē");
			newtext=newtext.replace(/i/gi,"ī");
			newtext=newtext.replace(/o/gi,"ō");
			newtext=newtext.replace(/u/gi,"ū");
			newtext=newtext.replace(/ū([āēīōū])/gi,"u$1");
    	}
		$(syll).text(newtext);

	}
	if (action == "html"){
		outer=$(line).prop('outerHTML')
		outer=outer.replace(/<\/span>/g, "</span>\n")
		//console.log(outer)
		//newline=prompt("Edit Line:", outer)
		bootbox.prompt({
    		title: "Edit the line:",
    		size: 'large',
    		backdrop: true,
    		inputType: 'textarea',
    		value: outer,
    		callback: function (result) {
        		//console.log(result);
        		newlinetext=result.replace(/\n/g, "")
        		//newlinetext=$(newline).text()
				//if(confirm("Use "+newlinetext+"?")){
				$(line).replaceWith(newlinetext);
				//}
    		}
		});
		
	}
	if (action == "edit"){
		thistext=$(syll).text()
		newtext = prompt("Edit:", thistext);
		$(syll).text(newtext);
	}
	if (action == "split"){
		thistext=$(syll).text()
		newtext = prompt("Divide with |:", thistext);
		var textarr = newtext.split('|')
		newhtml="<span class='syll short'>"+textarr[0]+"</span><span class='syll long'>"+textarr[1]+"</span>"
		$(syll).replaceWith(newhtml);
	}
	if (action == "unres"){
		$(syll).toggleClass('unres')
	}
	if (action == "anceps"){
		$(syll).toggleClass('anceps')
	}
	if (action == "except"){
		$(syll).toggleClass('exception')
	}
	if (action == "link"){
		$(syll).toggleClass('link')
	}
	if (action == "note"){
		//console.log('making note')
		var existing
		var existing=$(word).data('note')
		var wordtext=$(word).text()
		var notetext = prompt("Note on "+ wordtext + ":", existing);
		$(word).attr('data-note', notetext)
	}
	if (action == "undo"){
		$(line).replaceWith(backup)
	}
	if (action == "add") {addWord($(syll))}
	
	$(line).find('.syll').removeClass('wrong fixme')
	checkTriads(poem)
	checkLine($(line), metre)		
	saveGreek();
}

// important: you can't save or load unless you're accessing the page through some kind of web server (e.g. MAPM/LAMP)
// if you can't save, you shouldn't waste your time editing!!!!
function saveGreek(){ 
    var bufferId = $("#greek").html();    
    var title=location.pathname.split('/').slice(-1)[0].slice(0, -5) + "_save"
    //var title = "saved1" //change this to doc title or starting filename
    $.ajax({
                 type : "POST",
                 url : "saver.php",
                 data: {id : bufferId, title : title},
                 dataType: "html",
                 success: function(data){ 
                 //console.log("saved to "+title+".html"); 
                 }
                 });
}


//Function to save page without all the extra classes, and with header/footer
function savePage(){
	$('.short').removeClass('spondee dactyl endfoot startfoot long1 long2 short1 short2').addClass('syll short')
	$('.long').removeClass('spondee dactyl endfoot startfoot long1 long2 short1 short2').addClass('syll long')
	$('.feet').remove()
	$('.hemi').remove()	
	var bufferId = document.documentElement.innerHTML   
	var title=location.pathname.split('/').slice(-1)[0].slice(0, -5) + "_done"
	 $.ajax({
                 type : "POST",
                 url : "saver.php",
                 data: {id : bufferId, title : title},
                 dataType: "html",
                 success: function(data){ 
                 //console.log("saved to "+title+".html"); 
                 }
                 });


}
//=================================

//Html functions//==================
$(function() {
        $.contextMenu({
            selector: '.syll',
            //trigger: 'left',
            callback: function(key, options) {
                editPage($(this), key)
                //window.////console && //////console.log(m) || alert(m); 
            },
            items: {
                "short": {name: "short", icon: "fa-compress"},
                "long": {name: "long", icon: "fa-expand"},
                "notshort": {name: "notshort", icon: "fa-compress"},
                "notlong": {name: "notlong", icon: "fa-compress"},
                //"macron": {name: "macron", icon: "fa-minus"},
                "res1": {name: "res1", icon: "fa-hand-o-left"},
                "res2": {name: "res2", icon: "fa-hand-o-right"},
//                "nores": {name: "nores", icon: "fa-block"},
                "sep1": "---------",
                "hiatus": {name: "hiatus", icon: "fa-chain-broken"},
//                "shift3": {name: "shift3", icon: "fa-indent"},
//                "shift4": {name: "shift4", icon: "fa-outdent"},                
                "sep2": "---------",
                "edit": {name: "Edit", icon: "edit"},
                "delete": {name: "Delete", icon: "delete"},
                "join": {name: "join", icon: "fa-arrow-circle-left"},
                "wordjoin": {name: "wordjoin", icon: "fa-ban"},
                "split": {name: "split", icon: "fa-hand-spock-o"},
                "add": {name: "AddWord", icon: "fa-expand"},
//                "synizesis": {name: "synizesis", icon: "fa-dot-circle-o"},
                "sep3": "---------",
                "link": {name: "link", icon: "fa-pencil"},
            	"unres": {name: "unres", icon: "fa-pencil"},
            	"anceps": {name: "anceps", icon: "fa-pencil"},
            	"except": {name: "except", icon: "fa-pencil"},
//            	"note": {name: "note", icon: "fa-commenting"},
            	"html": {name: "html", icon: "fa-code"},
            	"checktriads": {name: "checktriads", icon: "fa-code"},

            }
        });   
    });
$(document).on('click', '.syll', function (event) {
line=$(this).closest('.line')
$('.selected').removeClass('selected')
$(line).addClass('selected')
metre=$(line).data("metre");

if (event.shiftKey){
	if ($(this).hasClass('short')){
		$(this).removeClass('short nores resolved res1 res2 res1p res2p').addClass('syll long');
		}
	else if ($(this).hasClass('long')){
		$(this).removeClass('long nores resolved res1 res2 res1p res2p').addClass('syll short');
		}
	else if ($(this).hasClass('elided')){
		$(this).removeClass('long elided nores resolved res1 res2 res1p res2p').addClass('syll short');
		}
	//checkHexPattern($(line))
	saveGreek();
	}
	
if (event.altKey){
	thattext=$(this).prev().text()
	thistext=$(this).text()
	$(this).text(thattext+thistext)
	$(this).prev().remove()
	//checkHexPattern($(line))
	saveGreek();
}

if (event.altKey && event.shiftKey){
	thistext=$(this).text()
	alert("removing "+thistext)
	$(this).remove()
}

$(line).find('.syll').removeClass('wrong fixme') //comment this out if you want extra debugging via css
//checkHexPattern($(line))
saveGreek();
});
//==================================

$(document).ready(function () { //document ready function (jQuery's way of waiting until doc is loaded before trying to do stuff with it)
	var title=location.pathname.split('/').slice(-1)[0].slice(0, -5) + "_save.html"
	//thisfile=document.location.href.match(/[^\/]+$/)[0]
	if(confirm("Load from save file?")){
	$('#greek').load(title, function(){
			//console.log("loaded saved data from "+title)
		});
	}
	$('.line').each(function(index){
		metre=$(this).data('metre');
		//console.log("meter is "+ metre)
		if (metre == "elegy"){
			scanElegy($(this))
		}	
		else if (metre == "hexameter" || metre=="hex"){
			checkHexLine($(this), metre)
		}
		else if (metre == "pentameter" || metre=="pent"){
			scanPent($(this), index)
			checkPentLine($(this))
		}
		
		else if (metre == "senarii" || metre=="ia6" || metre=="ia8"){
			//console.log("scanning ia6 etc.")
			scanSenarii($(this), metre)
			checkLine($(this), metre)
		}	
		/*else if (metre == "tr7"){
			scanSenarii($(this), "tr7")
			checkTr7($(this))
		}
		*/
		else if (metre == "an4cat"){
			scanLine($(this), "an4cat");
		}
		else{
			var sylls = $(this).find('.syll');
			syllLength = $(sylls).length;  
			$(sylls).each(function(index){
				$(this).addClass(getQty(this))
			});
		}	
		});//'.line'.each function 
});